{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","model","preview","predictions","onDrop","accepted","rejected","links","_this","setState","cropToCanvas","image","canvas","ctx","naturalWidth","naturalHeight","width","height","clearRect","drawImage","onImageChange","e","c","document","getElementById","getContext","target","detect","then","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","_this2","this","cocoSsd","react_default","a","createElement","className","build_default","accept","multiple","alt","onLoad","src","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iXAwIeA,0NAxHbC,MAAQ,CACNC,MAAO,KACPC,QAAS,GACTC,YAAa,MAWfC,OAAS,SAACC,EAAUC,EAAUC,GAC5BC,EAAKC,SAAS,CAAEP,QAASG,EAAS,GAAGH,SAAWK,EAAM,QAGxDG,aAAe,SAACC,EAAOC,EAAQC,GAC7B,IAAMC,EAAeH,EAAMG,aACrBC,EAAgBJ,EAAMI,cAE5BH,EAAOI,MAAQL,EAAMK,MACrBJ,EAAOK,OAASN,EAAMM,OAEtBJ,EAAIK,UAAU,EAAG,EAAGL,EAAID,OAAOI,MAAOH,EAAID,OAAOK,QAC7CH,EAAeC,EACjBF,EAAIM,UACFR,GACCG,EAAeC,GAAiB,EACjC,EACAA,EACAA,EACA,EACA,EACAF,EAAID,OAAOI,MACXH,EAAID,OAAOK,QAGbJ,EAAIM,UACFR,EACA,GACCI,EAAgBD,GAAgB,EACjCA,EACAA,EACA,EACA,EACAD,EAAID,OAAOI,MACXH,EAAID,OAAOK,WAKjBG,cAAgB,SAAAC,GAEd,IAAMC,EAAIC,SAASC,eAAe,UAC5BX,EAAMS,EAAEG,WAAW,MACzBjB,EAAKE,aAAaW,EAAEK,OAAQJ,EAAGT,GAC/BL,EAAKR,MAAMC,MAAM0B,OAAOL,GAAGM,KAAK,SAAAzB,GAE9B,IAAM0B,EAAO,kBACbhB,EAAIgB,KAAOA,EACXhB,EAAIiB,aAAe,MAEnB3B,EAAY4B,QAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GACpBlB,EAAQgB,EAAWE,KAAK,GACxBjB,EAASe,EAAWE,KAAK,GAE/BrB,EAAIuB,YAAc,UAClBvB,EAAIwB,UAAY,EAChBxB,EAAIyB,WAAWL,EAAGE,EAAGnB,EAAOC,GAE5BJ,EAAI0B,UAAY,UAChB,IAAMC,EAAY3B,EAAI4B,YAAYT,EAAWU,OAAO1B,MAC9C2B,EAAaC,SAASf,EAAM,IAClChB,EAAIgC,SAASZ,EAAGE,EAAGK,EAAY,EAAGG,EAAa,KAGjDxC,EAAY4B,QAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GAE1BrB,EAAI0B,UAAY,UAChB1B,EAAIiC,SAASd,EAAWU,MAAOT,EAAGE,2FA/EpB,IAAAY,EAAAC,KAClBC,MAAerB,KAAK,SAAA3B,GAClB8C,EAAKtC,SAAS,CACZR,MAAOA,uCAkFX,OACEiD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZL,KAAKhD,MAAMC,MACViD,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEE,UAAU,WACVE,OAAO,2CACPC,UAAU,EACVpD,OAAQ4C,KAAK5C,QAEZ4C,KAAKhD,MAAME,QACVgD,EAAAC,EAAAC,cAAA,OACEK,IAAI,iBACJC,OAAQV,KAAK5B,cACbiC,UAAU,eACVM,IAAKX,KAAKhD,MAAME,UAGlB,yBAEFgD,EAAAC,EAAAC,cAAA,UAAQQ,GAAG,YAGbV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,4BAlHQQ,IAAMC,YCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAAS/C,SAASC,eAAe,SD2H3C,kBAAmB+C,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.340e8b67.chunk.js","sourcesContent":["import React from 'react';\nimport MagicDropzone from \"react-magic-dropzone\";\n\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\nimport './App.css';\n\n// const tf = require('@tensorflow/tfjs');\n\n// const a = tf.tensor1d([3, 2, 1]);\n// const b = tf.tensor1d([2, 2, 2]);\n\n// a.greater(b).print();\n\n\nclass App extends React.Component {\n  state = {\n    model: null,\n    preview: \"\",\n    predictions: []\n  };\n\n  componentDidMount() {\n    cocoSsd.load().then(model => {\n      this.setState({\n        model: model\n      });\n    });\n  }\n\n  onDrop = (accepted, rejected, links) => {\n    this.setState({ preview: accepted[0].preview || links[0] });\n  };\n\n  cropToCanvas = (image, canvas, ctx) => {\n    const naturalWidth = image.naturalWidth;\n    const naturalHeight = image.naturalHeight;\n\n    canvas.width = image.width;\n    canvas.height = image.height;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    if (naturalWidth > naturalHeight) {\n      ctx.drawImage(\n        image,\n        (naturalWidth - naturalHeight) / 2,\n        0,\n        naturalHeight,\n        naturalHeight,\n        0,\n        0,\n        ctx.canvas.width,\n        ctx.canvas.height\n      );\n    } else {\n      ctx.drawImage(\n        image,\n        0,\n        (naturalHeight - naturalWidth) / 2,\n        naturalWidth,\n        naturalWidth,\n        0,\n        0,\n        ctx.canvas.width,\n        ctx.canvas.height\n      );\n    }\n  };\n\n  onImageChange = e => {\n\n    const c = document.getElementById(\"canvas\");\n    const ctx = c.getContext(\"2d\");\n    this.cropToCanvas(e.target, c, ctx);\n    this.state.model.detect(c).then(predictions => {\n      // Font options.\n      const font = \"16px sans-serif\";\n      ctx.font = font;\n      ctx.textBaseline = \"top\";\n\n      predictions.forEach(prediction => {\n        const x = prediction.bbox[0];\n        const y = prediction.bbox[1];\n        const width = prediction.bbox[2];\n        const height = prediction.bbox[3];\n        // Draw the bounding box.\n        ctx.strokeStyle = \"#00FFFF\";\n        ctx.lineWidth = 4;\n        ctx.strokeRect(x, y, width, height);\n        // Draw the label background.\n        ctx.fillStyle = \"#00FFFF\";\n        const textWidth = ctx.measureText(prediction.class).width;\n        const textHeight = parseInt(font, 10); // base 10\n        ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n      });\n\n      predictions.forEach(prediction => {\n        const x = prediction.bbox[0];\n        const y = prediction.bbox[1];\n        // Draw the text last to ensure it's on top.\n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(prediction.class, x, y);\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Dropzone-page\">\n        {this.state.model ? (\n          <MagicDropzone\n            className=\"Dropzone\"\n            accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\n            multiple={false}\n            onDrop={this.onDrop}\n          >\n            {this.state.preview ? (\n              <img\n                alt=\"upload preview\"\n                onLoad={this.onImageChange}\n                className=\"Dropzone-img\"\n                src={this.state.preview}\n              />\n            ) : (\n              \"Choose or drop a file.\"\n            )}\n            <canvas id=\"canvas\" />\n          </MagicDropzone>\n        ) : (\n          <div className=\"Dropzone\">Loading model...</div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}